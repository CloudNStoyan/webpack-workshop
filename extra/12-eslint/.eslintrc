{
  "root": true,
  "env": {
    "es6": true,
    "browser": true,
    "jest": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:react-hooks/recommended",
    "airbnb",
    "airbnb/hooks",
    "plugin:eslint-comments/recommended",
    "plugin:import/errors",
    "plugin:import/warnings"
  ],
  "plugins": ["react-refresh", "react", "eslint-comments", "prettier"],
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "settings": {
    "import/internal-regex": "^~",
    "import/resolver": {
      "node": {
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      }
    },
    "react": {
      "version": "detect"
    }
  },
  "reportUnusedDisableDirectives": true,
  "ignorePatterns": ["package-lock.json", "/dist/", "/coverage/", "/extra/"],
  "rules": {
    "indent": "off",
    "implicit-arrow-linebreak": "off",
    "function-paren-newline": "off",
    "no-void": "off",
    "linebreak-style": ["error", "unix"],
    "no-console": "error",
    "prettier/prettier": "error",
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ],
    "no-param-reassign": "off",
    "import/no-unresolved": "off",
    "import/prefer-default-export": "off",
    "import/extensions": "off",
    "import/order": [
      "error",
      {
        "groups": [
          "builtin",
          "external",
          "internal",
          "unknown",
          "index",
          ["sibling", "parent"],
          "object"
        ],
        "newlines-between": "always",
        "pathGroups": [
          {
            "pattern": "~/**",
            "group": "internal"
          }
        ],
        "pathGroupsExcludedImportTypes": ["builtin", "external"]
      }
    ],
    "react/require-default-props": "off",
    "react/jsx-props-no-spreading": "off",
    "react-refresh/only-export-components": "warn",
    "react/react-in-jsx-scope": "off",
    "react/function-component-definition": "off",
    "jsx-a11y/control-has-associated-label": "off",
    "jsx-a11y/no-static-element-interactions": "off",
    "jsx-a11y/no-noninteractive-element-to-interactive-role": "off",
    "jsx-a11y/click-events-have-key-events": "off"
  },
  "overrides": [
    {
      "files": ["**/*.+(ts|tsx)"],
      "plugins": ["@typescript-eslint", "deprecation"],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "ecmaVersion": "latest",
        "sourceType": "module",
        "ecmaFeatures": {
          "jsx": true
        },
        "project": ["tsconfig.json"]
      },
      "settings": {
        "import/parsers": {
          "@typescript-eslint/parser": [".ts", ".tsx"]
        }
      },
      "extends": [
        "plugin:@typescript-eslint/recommended",
        "airbnb-typescript",
        "plugin:import/typescript",
        "plugin:@typescript-eslint/recommended-requiring-type-checking"
      ],
      "rules": {
        "deprecation/deprecation": "error",
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "argsIgnorePattern": "^_",
            "varsIgnorePattern": "^_",
            "caughtErrorsIgnorePattern": "^_"
          }
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "variable",
            "format": ["camelCase", "PascalCase", "UPPER_CASE"],
            "leadingUnderscore": "allow"
          }
        ],
        "@typescript-eslint/no-misused-promises": [
          "error",
          {
            "checksVoidReturn": false
          }
        ]
      }
    },
    {
      "files": ["**/+(*.)+(spec|test).+(ts|js)?(x)", "src/testing/**"],
      "plugins": ["jest"],
      "extends": ["plugin:jest/recommended", "plugin:testing-library/react"],
      "rules": {
        "testing-library/no-wait-for-multiple-assertions": "off",
        "jest/expect-expect": "off"
      }
    },
    {
      "files": ["*.js"],
      "rules": {
        "import/no-extraneous-dependencies": [
          "error",
          {
            "devDependencies": true,
            "optionalDependencies": false,
            "peerDependencies": false
          }
        ]
      }
    }
  ]
}
